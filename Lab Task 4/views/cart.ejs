<style>
    @import url(//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css);
    @import url(https://fonts.googleapis.com/css?family=Titillium+Web:300);

    .green_shopping {
        display: flex;
        height: 100px;
        width: auto;
        font-size: 25px;
        text-align: center;
        background-color: #E2F4E8;
        justify-content: center;
        align-items: center;
    }

    .check_btn {
        display: flex;
        justify-content: flex-end;
    }

    .check_btn a {
        text-decoration: none;
        color: white;
    }

    button {
        background-color: black;
        color: white;
        font-size: 16px;
        width: 170px;
        height: 30px;
        left: 0;
        margin: 20px;
    }

    table {
        margin: 30px 20px 0 20px;
    }

    .quantity {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity button {
        width: 30px;
        height: 20px;
        background-color: white;
        font-size: 15px;
        color: black;
        text-align: center;
    }
</style>

<div class="green_shopping">
    SHOPPING CART
</div>

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th scope="col">Product</th>
            <th scope="col">Price</th>
            <th scope="col">Quantity</th>
            <th scope="col">Total</th>
        </tr>
    </thead>
    <tbody>
        <% cartItems.forEach(item=> { %>
            <tr data-id="<%= item.product._id %>">
                <td>
                    <img src="<%= item.product.picture %>" alt="<%= item.product.title %>"
                        style="width: 75px; height: 75px; margin-right: 10px;">
                    <span>
                        <%= item.product.title %>
                            <br>
                            <a href="javascript:void(0);" onclick="removeFromCart('<%= item.product._id %>')"><i
                                    class="fa-solid fa-trash"></i></a>
                    </span>
                </td>
                <td class="price" data-price="<%= item.product.price %>">
                    <%= item.product.price.toFixed(2) %>
                </td>
                <td>
                    <div class="quantity">
                        <button class="minus" onclick="updateQuantity('<%= item.product._id %>', -1)">-</button>
                        <span id="quantity-<%= item.product._id %>">
                            <%= item.quantity %>
                        </span>
                        <button class="plus" onclick="updateQuantity('<%= item.product._id %>', 1)">+</button>
                    </div>
                </td>
                <td id="total-<%= item.product._id %>">
                    <%= item.totalPrice %>
                </td>
            </tr>
            <% }) %>
    </tbody>

</table>
<div class="check_btn">
    <button><a href="/checkout">CHECKOUT</a></button>
</div>

<script>
    async function updateQuantity(productId, change) {
    try {
        // Fix template literal syntax
        const quantityElement = document.getElementById(`quantity-${productId}`);
        let currentQuantity = parseInt(quantityElement.innerText);

        // Update quantity based on the change
        currentQuantity += change;

        // Ensure quantity does not go below 1
        if (currentQuantity < 1) {
            currentQuantity = 1;
        }

        console.log("Sending quantity update:", {
            productId,
            quantity: currentQuantity
        });

        // Fix template literal and selector syntax
        const priceElement = document.querySelector(`tr[data-id="${productId}"] .price`);
        const priceText = priceElement.innerText;
        const price = parseFloat(priceText.replace(/[^0-9.-]+/g, ""));

        // Fix template literal syntax
        const totalElement = document.getElementById(`total-${productId}`);
        const totalPrice = (price * currentQuantity).toFixed(2);
        totalElement.innerText = totalPrice;

        // Fix template literal syntax and remove duplicate fetch
        const response = await fetch(`/update-cart/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: currentQuantity })
        });

        if (!response.ok) {
            throw new Error('Failed to update cart');
        }

        const data = await response.json();

        if (data.success) {
            // Update the displayed quantity
            quantityElement.innerText = currentQuantity;

            // Update the total price if needed
            const priceElement = document.querySelector(`tr[data-id="${productId}"] .price`);
            if (priceElement) {
                const price = parseFloat(priceElement.getAttribute('data-price'));
                const totalElement = document.getElementById(`total-${productId}`);
                if (totalElement && !isNaN(price)) {
                    totalElement.innerText = (price * currentQuantity).toFixed(2);
                }
            }
        } else {
            throw new Error(data.message || 'Failed to update cart');
        }
    } catch (error) {
        console.error("Error updating quantity:", error);
        alert('Failed to update quantity. Please try again.');
    }
}

async function removeFromCart(productId) {
    try {
        console.log('Attempting to remove product:', productId);
        const response = await fetch(`/remove-from-cart/${productId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Server response:', response);
        
        if (response.ok) {
            const data = await response.json();
            console.log('Remove success:', data);
            // Reload the page to reflect the updated cart
            window.location.reload();
        } else {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to remove item from cart");
        }
    } catch (error) {
        console.error("Error removing item:", error);
        alert('Failed to remove item from cart. Please try again.');
    }
}

</script>